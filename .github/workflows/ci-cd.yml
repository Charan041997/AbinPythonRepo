name: Python CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allows manual trigger

env:
  PYTHON_VERSION: '3.11'
  
jobs:
  # ===================================
  # JOB 1: Code Quality & Security
  # ===================================
  code-quality:
    name: Code Quality & Security Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      
      - name: 🔍 Run Flake8 (Linting)
        run: |
          echo "Running Flake8 linter..."
          flake8 src/ tests/ --max-line-length=100 --exclude=__pycache__,*.pyc
        continue-on-error: false
      
      - name: 🎨 Check Code Formatting (Black)
        run: |
          echo "Checking code formatting..."
          black --check src/ tests/ --line-length=100
        continue-on-error: false
      
      - name: 📊 Run Pylint
        run: |
          echo "Running Pylint..."
          pylint src/ --disable=C0111,R0903
        continue-on-error: true
      
      - name: 🔒 Security Check (Bandit)
        run: |
          echo "Running security scan..."
          bandit -r src/ -f json -o bandit-report.json
        continue-on-error: true
      
      - name: 🛡️ Check Dependencies (Safety)
        run: |
          echo "Checking for vulnerable dependencies..."
          safety check --json
        continue-on-error: true

  # ===================================
  # JOB 2: Testing (Multiple Python Versions)
  # ===================================
  test:
    name: Test on Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    needs: code-quality
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      
      - name: 🧪 Run Tests with Coverage
        run: |
          echo "Running tests with coverage..."
          pytest tests/ -v --cov=src --cov-report=xml --cov-report=html --cov-report=term
      
      - name: 📊 Upload Coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-${{ matrix.python-version }}
        continue-on-error: true
      
      - name: 💾 Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ matrix.python-version }}
          path: htmlcov/
          retention-days: 30

  # ===================================
  # JOB 3: Build & Package
  # ===================================
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install build wheel
      
      - name: 🏗️ Build Package
        run: |
          echo "Building Python package..."
          python -m build
      
      - name: 📁 Create Deployment Package
        run: |
          mkdir -p deployment
          cp -r src deployment/
          cp requirements.txt deployment/
          cp -r dist deployment/ 2>/dev/null || true
          tar -czf deployment-package.tar.gz deployment/
      
      - name: 💾 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package
          path: deployment-package.tar.gz
          retention-days: 30
      
      - name: 📋 Display Build Info
        run: |
          echo "==================================="
          echo "Build completed successfully!"
          echo "==================================="
          ls -lah deployment/
          echo "Package size:"
          du -sh deployment-package.tar.gz

  # ===================================
  # JOB 4: Docker Build (Optional)
  # ===================================
  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: 🔑 Log in to Docker Hub (if secrets configured)
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        continue-on-error: true
      
      - name: 🏗️ Build Docker Image
        run: |
          echo "Building Docker image..."
          docker build -t my-python-app:latest .
        continue-on-error: true

  # ===================================
  # JOB 5: Deploy to Staging
  # ===================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.example.com
    
    steps:
      - name: 📥 Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: deployment-package
      
      - name: 🚀 Deploy to Staging Server
        run: |
          echo "Deploying to staging environment..."
          echo "Extracting package..."
          tar -xzf deployment-package.tar.gz
          echo "✅ Deployment to staging complete!"
          # Add your actual deployment commands here
          # Example: scp, rsync, AWS CLI, etc.

  # ===================================
  # JOB 6: Deploy to Production
  # ===================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://example.com
    
    steps:
      - name: 📥 Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: deployment-package
      
      - name: 🚀 Deploy to Production Server
        run: |
          echo "Deploying to production environment..."
          echo "Extracting package..."
          tar -xzf deployment-package.tar.gz
          echo "✅ Deployment to production complete!"
          # Add your actual deployment commands here
      
      - name: 📢 Notify Deployment Success
        run: |
          echo "================================================"
          echo "🎉 Successfully deployed to production!"
          echo "================================================"

  # ===================================
  # JOB 7: Notifications
  # ===================================
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: 📧 Send Notification
        run: |
          echo "Pipeline Status: ${{ needs.deploy-production.result }}"
          # Add Slack, Email, or other notification logic here
